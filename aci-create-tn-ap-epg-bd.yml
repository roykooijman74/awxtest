---
- name: Create ACI TN AP EPG 
  hosts: "aci"
  gather_facts: no

  tasks:
    - name: Create Tenant
      aci_tenant:
        host: "{{ ansible_host }}"
        use_ssl: yes
        validate_certs: false
        username: "{{ ansible_user }}"
        password: "{{ ansible_password }}"
        tenant: "{{ tenant_name }}"
        description: "{{ description }}"
        state: "{{ action }}"
      register: result

    - name: Display the result
      debug:
        var: result
        
    - name: Create Application profile
      aci_ap:
        host: "{{ ansible_host }}"
        use_ssl: yes
        validate_certs: false
        username: "{{ ansible_user }}"
        password: "{{ ansible_password }}"
        tenant: "{{ tenant_name }}"
        ap: "{{ ap_name }}"
        description: "{{ description }}"
        state: "{{ action }}"
      register: result
    - name: Display the result
      debug:
        var: result

    - name: Create BD
      aci_bd:
        host: "{{ ansible_host }}"
        use_ssl: yes
        validate_certs: false
        username: "{{ ansible_user }}"
        password: "{{ ansible_password }}"
        tenant: "{{ tenant_name }}"
        bd: "{{ bd_name }}"                     #          "acc_#####_naam_xtr_yyy_dc1",
        description: "{{ description }}"        #        "descr": "apm-id:####,alias:AAAA",
        state: "{{ action }}"
#        annotation": "",
#        nameAlias": "XXXX",


        arp_flooding: "no"                      #        "arpFlood": "no",
#        bd_type": "ethernet"                   ###niet in ACI json   #        "type": "regular",???

        enable_multicast: false                 #        "mcastAllow": "no",
        endpoint_clear: false                   #        "epClear": "no",
        endpoint_move_detect: default           #        "epMoveDetectMode": "",
        enable_routing : true                   #        "unicastRoute": "yes",
                                                #        "hostBasedRouting": "no",
        ip_learning: true                       #        "ipLearning": "yes",
#2.7.0        ipv6_l3_unknown_multicast : "flood"     #        "v6unkMcastAct": "flood",
        l2_unknown_unicast : "proxy"            #        "unkMacUcastAct": "proxy",
        l3_unknown_multicast: "flood"           #        "unkMcastAct": "flood",
        limit_ip_learn : true                   #        "limitIpLearnToSubnets": "yes",
#        mac_addres                             #        "mac": "00:22:BD:F8:19:FF",## The APIC defaults to 00:22:BD:F8:19:FF when unset during creation.
        multi_dest: "bd-flood"                  #        "multiDstPktAct": "bd-flood",
        vrf: "1"                    #       child fvRsCtx
                                                        #"fvRsCtx": {
                                                        #  "attributes": {
                                                        #       "annotation": "",
                                                        #       "tnFvCtxName": "198_tcn"
                                                #        "ownerKey": "",
                                                #        "ownerTag": "",
                                                #        "intersiteBumTrafficAllow": "no",
                                                #        "intersiteL2Stretch": "no",
                                                #        "ipv6McastAllow": "no",
                                                #        "llAddr": "::",
                                                #        "vmac": "not-applicable"      register: result
      
    - name: Display the result
      debug:
        var: result

    - name: Create BD Subnet
      aci_bd_subnet:
        host: "{{ ansible_host }}"
        use_ssl: yes
        validate_certs: false
        username: "{{ ansible_user }}"
        password: "{{ ansible_password }}"
        tenant: "{{ tenant_name }}"
        bd: "{{ bd_name }}"
        gateway: "{{ gateway}}"
        mask: "{{ mask }}"
        description: "{{ description }}"
        state: "{{ action }}"
      register: result
      
    - name: Display the result
      debug:
        var: result


    - name: Create EPG
      aci_epg:
        host: "{{ ansible_host }}"
        use_ssl: yes
        validate_certs: false
        username: "{{ ansible_user }}"
        password: "{{ ansible_password }}"
        tenant: "{{ tenant_name }}"
        ap: "{{ ap_name }}"
        epg: "{{ epg_name }}"
        bd: "{{ bd_name }}"
        description: "{{ description }}"
        preferred_group: true
        state: "{{ action }}"
      register: result

    - name: Display the result
      debug:
        var: result

    - name: Add Domain to EPG
      aci_epg_to_domain:
        host: "{{ ansible_host }}"
        use_ssl: yes
        validate_certs: false
        username: "{{ ansible_user }}"
        password: "{{ ansible_password }}"
        tenant: "{{ tenant_name }}"
        ap: "{{ ap_name }}"
        epg: "{{ epg_name }}"
        domain: vm1
        domain_type: vmm
        vm_provider : vmware
        resolution_immediacy: immediate
        deploy_immediacy : immediate
        state: "{{ action }}"
      register: result

    - name: Display the result
      debug:
        var: result
